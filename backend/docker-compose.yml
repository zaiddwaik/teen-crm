version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: teen_crm_postgres
    environment:
      POSTGRES_DB: ${DATABASE_NAME:-teen_crm}
      POSTGRES_USER: ${DATABASE_USER:-postgres}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-postgres}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "${DATABASE_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - teen_crm_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER:-postgres} -d ${DATABASE_NAME:-teen_crm}"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache (optional, for session storage and caching)
  redis:
    image: redis:7-alpine
    container_name: teen_crm_redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - teen_crm_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    command: >
      --requirepass ${REDIS_PASSWORD:-redis123}
      --appendonly yes
      --appendfsync everysec

  # Teen CRM Backend Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: teen_crm_backend
    environment:
      # Database
      DATABASE_URL: "postgresql://${DATABASE_USER:-postgres}:${DATABASE_PASSWORD:-postgres}@postgres:5432/${DATABASE_NAME:-teen_crm}?schema=public"
      
      # Server
      NODE_ENV: production
      PORT: 3001
      
      # Security
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-15m}
      JWT_REFRESH_EXPIRES_IN: ${JWT_REFRESH_EXPIRES_IN:-7d}
      BCRYPT_ROUNDS: ${BCRYPT_ROUNDS:-12}
      
      # CORS
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000}
      
      # Rate Limiting
      RATE_LIMIT_WINDOW_MS: ${RATE_LIMIT_WINDOW_MS:-900000}
      RATE_LIMIT_MAX_REQUESTS: ${RATE_LIMIT_MAX_REQUESTS:-100}
      
      # Business Configuration
      WON_PAYOUT_AMOUNT: ${WON_PAYOUT_AMOUNT:-9}
      LIVE_PAYOUT_AMOUNT: ${LIVE_PAYOUT_AMOUNT:-7}
      
      # File Upload
      MAX_FILE_SIZE: ${MAX_FILE_SIZE:-10485760}
      UPLOAD_PATH: ${UPLOAD_PATH:-./uploads}
      
      # Email (optional)
      EMAIL_SERVICE: ${EMAIL_SERVICE:-}
      EMAIL_HOST: ${EMAIL_HOST:-}
      EMAIL_PORT: ${EMAIL_PORT:-587}
      EMAIL_USER: ${EMAIL_USER:-}
      EMAIL_PASSWORD: ${EMAIL_PASSWORD:-}
      EMAIL_FROM: ${EMAIL_FROM:-}
      
      # External Services (optional)
      CLOUDINARY_CLOUD_NAME: ${CLOUDINARY_CLOUD_NAME:-}
      CLOUDINARY_API_KEY: ${CLOUDINARY_API_KEY:-}
      CLOUDINARY_API_SECRET: ${CLOUDINARY_API_SECRET:-}
      
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-info}
      LOG_FILE_PATH: ${LOG_FILE_PATH:-./logs}
      
    ports:
      - "${APP_PORT:-3001}:3001"
    volumes:
      - app_uploads:/app/uploads
      - app_logs:/app/logs
    networks:
      - teen_crm_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "http.get('http://localhost:3001/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Reverse Proxy (optional, for production)
  nginx:
    image: nginx:alpine
    container_name: teen_crm_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - app_uploads:/var/www/uploads:ro
    networks:
      - teen_crm_network
    depends_on:
      - app
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  teen_crm_network:
    driver: bridge
    name: teen_crm_network

volumes:
  postgres_data:
    name: teen_crm_postgres_data
  redis_data:
    name: teen_crm_redis_data
  app_uploads:
    name: teen_crm_uploads
  app_logs:
    name: teen_crm_logs